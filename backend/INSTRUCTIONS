All paths in this INSTRUCTION file are relative to the directory in which the
file resides.

STEP 0: Extract msieve
A .tar.gz of msieve 1.53 has been provided. Extract this to ./msieve.
Alternately, download you own copy, though I cannot guarantee this version will
work with the glue code I have written.

STEP 1: Object files for msieve
Compile msieve's .a file (containing all .o files we need to link against)
by running the following command in ./msieve: 
$ make all <options...>

You can customize the options depending on which libraries you have on your
system. Use `make` to see what options are available.

STEP 2: Object files for hook.c
hook.c provides the factor_number function, which takes a string representing
the number to factor, and returns the number's factors as a string.
This string can be read by Haskell as a list of integers, e.g. the return
string for "15" is "[3,5]".

To produce the object file for hook.c, we compile it with the relevant
libraries, and make sure to include headers from ./msieve/include:
$ gcc -Wall hook.c msieve/libmsieve.a -lgmp -lm -lpthread -ldl -c -Imsieve/include

STEP 3: Compile with foreign C code
src/Factor.hs provides the Haskell bindings to use hook.c. Whenever including
it in a module definition, you must include the hook.o and libmsieve.a files
while compiling. Examples follow:
$ ghc src/Factor.hs hook.o msieve/libmsieve.a
$ ghc src/main.hs hook.o msieve/libmsieve.a

These flags can be configured in your cabal file.
